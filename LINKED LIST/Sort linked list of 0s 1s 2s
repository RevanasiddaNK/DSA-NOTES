
/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

//Node *tbi = new  Node();

void insert(Node* &temp ,Node* &head,Node* &tail){
    
        if(head == NULL){
            head = temp;
            tail = temp;
        }
        else if(tail != NULL){
                
            //Node* toBeInserted(temp->data);
       //     Node toBeInserted;  // Statically allocate memory
       //     toBeInserted.data = temp->data;  // Assign data to the new node
            tail->next = temp;
            tail = tail->next;
        }
    }
Node* sortList(Node *head){
    // Write your code here.
    if(head == NULL || head->next == NULL)
            return head;
            
        Node* zerohead = NULL;
        Node* zerotail = NULL;
        Node* onehead = NULL;
        Node* onetail = NULL;
        Node* twohead = NULL;
        Node* twotail = NULL;
        Node* temp = head;
        while(temp != NULL){
            
           // Node *tbi = temp;
           // tbi->data = temp->data;
            //temp = temp->next;
           // tbi->next = NULL;
            Node* tbi = new Node(temp->data);
            if(temp->data == 0)
                insert(tbi,zerohead,zerotail);
                
            else if(temp->data == 1)
                insert(tbi,onehead,onetail);
                
            else{
                insert(tbi,twohead,twotail);}
             
            temp = temp->next;  
        }
        if(zerohead!=NULL){
            zerotail->next=onehead;
            if(onehead!=NULL)
                onetail->next=twohead;
            return zerohead;
        }
        else if(onehead!=NULL){
            onetail->next=twohead;
            return onehead;}
        else if(twohead!=NULL)
            return twohead;
            
        return head;
}
